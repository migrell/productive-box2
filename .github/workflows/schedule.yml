name: Activity Box SVG Generator
on:
  schedule:
    - cron: '*/10 * * * *'
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Create SVG generator script
        run: |
          cat > generate-svg.js << 'EOL'
          const { Octokit } = require('@octokit/rest');
          const fs = require('fs');
          
          async function main() {
            const octokit = new Octokit({
              auth: process.env.GH_PAT
            });
            
            const username = process.env.GH_USERNAME;
            
            // ÏµúÍ∑º Ïª§Î∞ã ÌôúÎèô Í∞ÄÏ†∏Ïò§Í∏∞
            const events = await octokit.activity.listEventsForUser({
              username,
              per_page: 100
            });
            
            // ÏãúÍ∞ÑÎåÄÎ≥Ñ Ïª§Î∞ã Ïπ¥Ïö¥Ìä∏
            const commitsByTimeOfDay = {
              morning: 0,   // 06:00 - 11:59
              daytime: 0,   // 12:00 - 17:59
              evening: 0,   // 18:00 - 23:59
              night: 0      // 00:00 - 05:59
            };
            
            // Ïù¥Î≤§Ìä∏ Î∂ÑÏÑù
            events.data.forEach(event => {
              // PushEventÎßå ÌïÑÌÑ∞ÎßÅ (Ïã§Ï†ú Ïª§Î∞ã Ïù¥Î≤§Ìä∏)
              if (event.type === 'PushEvent') {
                const eventDate = new Date(event.created_at);
                const hour = eventDate.getHours();
                
                // ÏãúÍ∞ÑÎåÄÎ≥Ñ Ïπ¥Ïö¥Ìä∏ Ï¶ùÍ∞Ä
                if (hour >= 6 && hour < 12) {
                  commitsByTimeOfDay.morning += 1;
                } else if (hour >= 12 && hour < 18) {
                  commitsByTimeOfDay.daytime += 1;
                } else if (hour >= 18 && hour < 24) {
                  commitsByTimeOfDay.evening += 1;
                } else {
                  commitsByTimeOfDay.night += 1;
                }
              }
            });
            
            // Ï¥ù Ïª§Î∞ã Ïàò Í≥ÑÏÇ∞
            const totalCommits = Object.values(commitsByTimeOfDay).reduce((sum, count) => sum + count, 0);
            
            // ÌçºÏÑºÌã∞ÏßÄ Í≥ÑÏÇ∞
            const percentages = {
              morning: ((commitsByTimeOfDay.morning / totalCommits) * 100).toFixed(1),
              daytime: ((commitsByTimeOfDay.daytime / totalCommits) * 100).toFixed(1),
              evening: ((commitsByTimeOfDay.evening / totalCommits) * 100).toFixed(1),
              night: ((commitsByTimeOfDay.night / totalCommits) * 100).toFixed(1)
            };
            
            // SVG ÌÖúÌîåÎ¶ø ÏÉùÏÑ±
            const svgWidth = 500;
            const svgHeight = 200;
            const barHeight = 20;
            const barWidth = 300;
            const barSpacing = 35;
            
            // Î∞î ÏÉâÏÉÅ Ï†ïÏùò
            const barColors = {
              morning: '#F7DC6F', // ÎÖ∏ÎûÄÏÉâ
              daytime: '#5DADE2', // ÌååÎûÄÏÉâ
              evening: '#7D3C98', // Î≥¥ÎùºÏÉâ
              night: '#2E4053'    // ÏßôÏùÄ ÎÇ®ÏÉâ
            };
            
            // Î∞î Í∏∏Ïù¥ Í≥ÑÏÇ∞
            const getBarLength = (percentage) => {
              return (percentage / 100) * barWidth;
            };
            
            // SVG ÏÉùÏÑ±
            let svg = `
            <svg width="${svgWidth}" height="${svgHeight}" xmlns="http://www.w3.org/2000/svg">
              <style>
                .text { font: 12px Arial, sans-serif; fill: #333; }
                .title { font: bold 14px Arial, sans-serif; fill: #000; }
                .emoji { font-size: 14px; }
                .bar-bg { fill: #eee; }
                .bar-fill { fill: #555; }
                .percentage { font: 10px Arial, sans-serif; fill: #333; text-anchor: end; }
              </style>
              
              <text x="10" y="20" class="title">I'm an early üê§</text>
              
              <!-- Morning -->
              <text x="10" y="${40 + barSpacing * 0}" class="text">
                <tspan class="emoji">üåû</tspan> Morning
              </text>
              <rect x="100" y="${30 + barSpacing * 0}" width="${barWidth}" height="${barHeight}" rx="3" class="bar-bg" />
              <rect x="100" y="${30 + barSpacing * 0}" width="${getBarLength(percentages.morning)}" height="${barHeight}" rx="3" fill="${barColors.morning}" />
              <text x="410" y="${45 + barSpacing * 0}" class="text">${commitsByTimeOfDay.morning} commits</text>
              <text x="${105 + getBarLength(percentages.morning)}" y="${45 + barSpacing * 0}" class="percentage">${percentages.morning}%</text>
              
              <!-- Daytime -->
              <text x="10" y="${40 + barSpacing * 1}" class="text">
                <tspan class="emoji">üåÜ</tspan> Daytime
              </text>
              <rect x="100" y="${30 + barSpacing * 1}" width="${barWidth}" height="${barHeight}" rx="3" class="bar-bg" />
              <rect x="100" y="${30 + barSpacing * 1}" width="${getBarLength(percentages.daytime)}" height="${barHeight}" rx="3" fill="${barColors.daytime}" />
              <text x="410" y="${45 + barSpacing * 1}" class="text">${commitsByTimeOfDay.daytime} commits</text>
              <text x="${105 + getBarLength(percentages.daytime)}" y="${45 + barSpacing * 1}" class="percentage">${percentages.daytime}%</text>
              
              <!-- Evening -->
              <text x="10" y="${40 + barSpacing * 2}" class="text">
                <tspan class="emoji">üåÉ</tspan> Evening
              </text>
              <rect x="100" y="${30 + barSpacing * 2}" width="${barWidth}" height="${barHeight}" rx="3" class="bar-bg" />
              <rect x="100" y="${30 + barSpacing * 2}" width="${getBarLength(percentages.evening)}" height="${barHeight}" rx="3" fill="${barColors.evening}" />
              <text x="410" y="${45 + barSpacing * 2}" class="text">${commitsByTimeOfDay.evening} commits</text>
              <text x="${105 + getBarLength(percentages.evening)}" y="${45 + barSpacing * 2}" class="percentage">${percentages.evening}%</text>
              
              <!-- Night -->
              <text x="10" y="${40 + barSpacing * 3}" class="text">
                <tspan class="emoji">üåô</tspan> Night
              </text>
              <rect x="100" y="${30 + barSpacing * 3}" width="${barWidth}" height="${barHeight}" rx="3" class="bar-bg" />
              <rect x="100" y="${30 + barSpacing * 3}" width="${getBarLength(percentages.night)}" height="${barHeight}" rx="3" fill="${barColors.night}" />
              <text x="410" y="${45 + barSpacing * 3}" class="text">${commitsByTimeOfDay.night} commits</text>
              <text x="${105 + getBarLength(percentages.night)}" y="${45 + barSpacing * 3}" class="percentage">${percentages.night}%</text>
              
              <text x="10" y="${190}" class="text">Last Updated: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}</text>
            </svg>
            `;
            
            // SVG ÌååÏùº Ï†ÄÏû•
            fs.writeFileSync('activity-summary.svg', svg);
            console.log('SVG file generated successfully!');
            
            // GitHubÏóê SVG ÌååÏùº Ïª§Î∞ã
            const fileContent = fs.readFileSync('activity-summary.svg', 'utf8');
            
            try {
              // Ï†ÄÏû•ÏÜåÏóêÏÑú ÌòÑÏû¨ ÌååÏùº Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
              const { data: fileData } = await octokit.repos.getContent({
                owner: username,
                repo: username,
                path: 'activity-summary.svg',
              }).catch(() => ({ data: { sha: null } }));
              
              // ÌååÏùº ÏóÖÎç∞Ïù¥Ìä∏ ÎòêÎäî ÏÉùÏÑ±
              await octokit.repos.createOrUpdateFileContents({
                owner: username,
                repo: username,
                path: 'activity-summary.svg',
                message: 'Update activity summary SVG',
                content: Buffer.from(fileContent).toString('base64'),
                sha: fileData.sha,
              });
              
              console.log('Successfully committed SVG to GitHub repository!');
            } catch (error) {
              console.error('Error committing SVG file:', error);
            }
          }
          
          main().catch(error => {
            console.error('Error generating SVG:', error);
            process.exit(1);
          });
          EOL
      
      - name: Install dependencies
        run: npm install @octokit/rest
        
      - name: Generate SVG
        run: node generate-svg.js
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          GH_USERNAME: migrell
